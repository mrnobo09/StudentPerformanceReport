{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT } from './types';\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n    try {\n      const res = await axios.post('http://127.0.0.1:8000/auth/jwt/verify/', body, config);\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.get('http://127.0.0.1:8000/auth/users/me/', config);\n      console.log(res.data);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n      console.log(\"User Loaded Failed\");\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post('http://127.0.0.1:8000/auth/jwt/create/', body, config);\n    console.log(body + \" \" + config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","checkAuthenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","data","code","type","err","load_user","get","console","log","payload","login","email","password","logout"],"sources":["D:/Project/StudentPerformanceReport/reactfrontend/src/Actions/auth.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    LOGOUT\r\n} from './types';\r\n\r\nexport const checkAuthenticated = () => async dispatch =>{\r\n    if (localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        }; \r\n        const body = JSON.stringify({\r\n            token : localStorage.getItem('access')\r\n        })\r\n\r\n        try{\r\n            const res = await axios.post('http://127.0.0.1:8000/auth/jwt/verify/',body,config)\r\n            if(res.data.code !== 'token_not_valid'){\r\n                dispatch({\r\n                    type : AUTHENTICATED_SUCCESS\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type : AUTHENTICATED_FAIL\r\n                })\r\n            }\r\n\r\n        }catch(err){\r\n            dispatch({\r\n                type : AUTHENTICATED_FAIL\r\n            })\r\n        }\r\n\r\n    }else{\r\n        dispatch({\r\n            type : AUTHENTICATED_FAIL\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        }; \r\n        try {\r\n            const res = await axios.get('http://127.0.0.1:8000/auth/users/me/', config);\r\n            console.log(res.data)\r\n            dispatch({\r\n                type: USER_LOADED_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n            console.log(\"User Loaded Failed\")\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const res = await axios.post('http://127.0.0.1:8000/auth/jwt/create/',body, config);\r\n        console.log(body +\" \"+  config);\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(load_user());\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        })\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch =>{\r\n    dispatch({\r\n        type:LOGOUT\r\n    }) \r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SACIC,aAAa,EACbC,UAAU,EACVC,mBAAmB,EACnBC,gBAAgB,EAChBC,qBAAqB,EACrBC,kBAAkB,EAClBC,MAAM,QACH,SAAS;AAEhB,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM,MAAMC,QAAQ,IAAG;EACrD,IAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAC;IAC/B,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACd;IACJ,CAAC;IACD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MACxBC,KAAK,EAAGP,YAAY,CAACC,OAAO,CAAC,QAAQ;IACzC,CAAC,CAAC;IAEF,IAAG;MACC,MAAMO,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAACL,IAAI,EAACF,MAAM,CAAC;MAClF,IAAGM,GAAG,CAACE,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAC;QACnCZ,QAAQ,CAAC;UACLa,IAAI,EAAGjB;QACX,CAAC,CAAC;MACN,CAAC,MAAI;QACDI,QAAQ,CAAC;UACLa,IAAI,EAAGhB;QACX,CAAC,CAAC;MACN;IAEJ,CAAC,QAAMiB,GAAG,EAAC;MACPd,QAAQ,CAAC;QACLa,IAAI,EAAGhB;MACX,CAAC,CAAC;IACN;EAEJ,CAAC,MAAI;IACDG,QAAQ,CAAC;MACLa,IAAI,EAAGhB;IACX,CAAC,CAAC;EACN;AAEJ,CAAC;AAED,OAAO,MAAMkB,SAAS,GAAGA,CAAA,KAAM,MAAMf,QAAQ,IAAI;EAC7C,IAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,OAAMH,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,EAAC;QACxD,QAAQ,EAAE;MACd;IACJ,CAAC;IACD,IAAI;MACA,MAAMO,GAAG,GAAG,MAAMlB,KAAK,CAACyB,GAAG,CAAC,sCAAsC,EAAEb,MAAM,CAAC;MAC3Ec,OAAO,CAACC,GAAG,CAACT,GAAG,CAACE,IAAI,CAAC;MACrBX,QAAQ,CAAC;QACLa,IAAI,EAAEnB,mBAAmB;QACzByB,OAAO,EAAEV,GAAG,CAACE;MACjB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOG,GAAG,EAAE;MACVd,QAAQ,CAAC;QACLa,IAAI,EAAElB;MACV,CAAC,CAAC;MACFsB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ,CAAC,MAAM;IACHlB,QAAQ,CAAC;MACLa,IAAI,EAAElB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAMyB,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAMtB,QAAQ,IAAI;EACxD,MAAMG,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEc,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEhD,IAAI;IACA,MAAMb,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAACL,IAAI,EAAEF,MAAM,CAAC;IACnFc,OAAO,CAACC,GAAG,CAACb,IAAI,GAAE,GAAG,GAAGF,MAAM,CAAC;IAC/BH,QAAQ,CAAC;MACLa,IAAI,EAAErB,aAAa;MACnB2B,OAAO,EAAEV,GAAG,CAACE;IACjB,CAAC,CAAC;IAEFX,QAAQ,CAACe,SAAS,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOD,GAAG,EAAE;IACVd,QAAQ,CAAC;MACLa,IAAI,EAAEpB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAM8B,MAAM,GAAGA,CAAA,KAAMvB,QAAQ,IAAG;EACnCA,QAAQ,CAAC;IACLa,IAAI,EAACf;EACT,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}